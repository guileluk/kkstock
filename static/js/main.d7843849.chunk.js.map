{"version":3,"sources":["App.tsx","reportWebVitals.tsx","index.tsx"],"names":["defaultColDef","sortable","App","useState","rowData","setRowData","useEffect","fetch","then","result","json","className","style","height","width","onGridReady","params","onFirstDataRendered","colIds","columnApi","getAllDisplayedColumns","map","col","getColId","autoSizeColumns","headerName","field","pinned","maxWidth","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.d7843849.chunk.js","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, { useState,useEffect } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\n\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\n\n\nconst defaultColDef = {\n    // set every column width\n    //width: 120,\n    // make every column editable\n    sortable: true,\n    // make every column use 'text' filter by default\n    //filter: 'agTextColumnFilter',\n    //valueFormatter: params => currencyFormatter(params.data.currency, '$'),\n};\n/*\nvar gridOptions = {\n    onGridReady: function () {\n        gridOptions.api.sizeColumnsToFit();\n    }\n}\n*/\n\nconst App = () => {\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null);\n    const [rowData, setRowData] = useState([]);\n    const autoSizeColumns = params => {\n        const colIds = params.columnApi\n        .getAllDisplayedColumns()\n        .map(col => col.getColId());\n\n        params.columnApi.autoSizeColumns(colIds);\n        //params.columnApi.sizeColumnsToFit();\n    };\n\n    const onGridReady = (params) => {\n        //this.gridApi = params.api;\n        //this.gridApi.sizeColumnsToFit();\n    };\n\n    useEffect(() => {\n         fetch('http://localhost:5000/view/json/consolidated')\n         .then(result => result.json())\n         .then(rowData => setRowData(rowData))\n     }, []);\n\n  return (\n  <>\n    <div className=\"ag-theme-balham\" style={{height: 800, width: 1900}}>\n        <AgGridReact\n            onGridReady={onGridReady}\n            onFirstDataRendered={autoSizeColumns}\n            defaultColDef={defaultColDef}\n            rowData={rowData}>\n\n            <AgGridColumn headerName=\"Code\" field=\"Stock\" pinned=\"left\" maxWidth={70}></AgGridColumn>\n            <AgGridColumn headerName=\"Stock Name\" field=\"longName\" pinned=\"left\" maxWidth={300}></AgGridColumn>\n            <AgGridColumn headerName=\"Price\" field=\"regularMarketPrice\" ></AgGridColumn>\n\n            <AgGridColumn headerName=\"3 Year Perform\">\n            <AgGridColumn headerName=\"2021 ($)\" field=\"2021_dollar\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"2020 ($)\" field=\"2020_dollar\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"2019 ($)\" field=\"2019_dollar\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"2021 (%)\" field=\"2021_percent\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"2020 (%)\" field=\"2020_percent\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"2019 (%)\" field=\"2019_percent\" maxWidth={80}></AgGridColumn>\n            </AgGridColumn>\n\n            <AgGridColumn headerName=\"EPS\" field=\"epsTrailingTwelveMonths\" maxWidth={60}></AgGridColumn>\n            <AgGridColumn headerName=\"PE\" field=\"trailingPE\" maxWidth={60}></AgGridColumn>\n\n            <AgGridColumn headerName=\"Dividend\">\n            <AgGridColumn headerName=\"Annual ($)\" field=\"trailingAnnualDividendRate\" maxWidth={90}></AgGridColumn>\n            <AgGridColumn headerName=\"Rate (%)\" field=\"trailingAnnualDividendYield\" maxWidth={80}></AgGridColumn>\n            </AgGridColumn>\n            <AgGridColumn headerName=\"Net Income (MM) (Last 4 year)\">\n            <AgGridColumn headerName=\"Last Year \" field=\"netIncome_1\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"Year 2 \" field=\"netIncome_2\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"Year 3 \" field=\"netIncome_3\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"Year 4 \" field=\"netIncome_4\" maxWidth={80}></AgGridColumn>\n            </AgGridColumn>\n            <AgGridColumn headerName=\"Net Income Growth % (3 year)\">\n            <AgGridColumn headerName=\"Last Year \" field=\"netincome_percent_1\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"Year 2 \" field=\"netincome_percent_2\" maxWidth={80}></AgGridColumn>\n            <AgGridColumn headerName=\"Year 3 \" field=\"netincome_percent_3\" maxWidth={80}></AgGridColumn>\n            </AgGridColumn>\n            <AgGridColumn headerName=\"Net Income \">\n            <AgGridColumn headerName=\"Indicator\" field=\"netincome_percent_indicator\" filter={true}></AgGridColumn>\n            </AgGridColumn>\n        </AgGridReact>\n    </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry:any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}